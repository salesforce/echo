worker_processes  10;
events {
  worker_connections  1024;
}

env JWT_SECRET;

http {
  server {
    listen       3891;
    server_name _;
    location / {
      resolver 8.8.8.8;
      set $key $http_host$request_uri;
      if ( $http_echo_key ) {
        set $key $http_echo_key;
      }
      set_escape_uri $escaped_key $key;

      srcache_fetch GET /v0.1/cache/get key=$escaped_key;

      set $expire 3600;
      if ( $http_echo_expire ) {
        set $expire $http_echo_expire;
      }
      if ( $http_echo_key ) {
        srcache_store PUT /v0.1/cache/put key=$escaped_key&expire=$expire;
      }

      proxy_set_header Host $http_host;
      proxy_pass http://$http_host$request_uri;
      proxy_buffers   256 4k;
    }

    location = /v0.1/cache/get {
      set $redis_key $arg_key;
      redis_pass 127.0.0.1:7778;
    }

    location = /v0.1/cache/put {
      set $key $arg_key;
      set $expire $arg_expire;
      redis2_query set $key $echo_request_body;
      redis2_query expire $key $expire;
      redis2_pass 127.0.0.1:7777;
    }

    location = /v0.1/cache/del {
      set $keys $arg_keys;
      set $query 'EVAL "return redis.call(\'del\', unpack(redis.call(\'keys\', \'$keys\')))" 0\r\n';
      redis2_raw_query $query;
      redis2_pass 127.0.0.1:7777;
    }

    location = /v0.1/cache/observe {
      set $key $arg_key;
      set $pattern $arg_pattern;
      set $weight $arg_weight;
      redis2_query zadd $key $weight $pattern;
      redis2_raw_query $query;
      redis2_pass 127.0.0.1:7777;
    }

    location = /v0.1/cache/notify {
      set $key $arg_key;
      #set $query 'EVAL "return redis.call(\'del\',  unpack(redis.call(\'keys\', unpack(redis.call(\'zrange\', \'$key\', \'0\', \'-1\'))))" 0\r\n';
      set $query 'EVAL "return redis.call(\'keys\', unpack(redis.call(\'zrange\', KEYS[1], 0, -1, \'$key\'))" 0\r\n';
      redis2_raw_query $query;
      redis2_pass 127.0.0.1:7777;
    }

    location = /v0.1/cache/keys {
      set $pattern $arg_pattern;
      redis2_query keys $pattern;
      redis2_pass 127.0.0.1:7777;
    }
  }

  lua_package_path "/Users/pteyer/echo/lualib/?.lua;;";
  server {
    listen 8080;

    location / {
      default_type text/html;
      content_by_lua '
        ngx.say("<p>hello, unprotected lua world</p>")
        ';
    }

    location /secure/ {
      access_by_lua_file /Users/pteyer/echo/lualib/bearer.lua;

      default_type text/plain;
      echo "<p>i am protected by jwt<p>";
    }
  }

}
